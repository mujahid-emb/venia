{"version":3,"sources":["../../src/util/run-as-root.js"],"names":["debug","require","makeFileLogger","__filename","fs","exec","join","escapeBashQuotes","str","split","tmp","__dirname","Math","random","toString","slice","sudoPromptToRunShell","prompt","cmd","stdout","stderr","e","identity","x","fullOutputForError","message","filter","formattedError","Error","module","exports","func","args","codeText","scriptLoc","invoked","JSON","stringify","writeFile","process","argv","unlink"],"mappings":";;AAAA;;;;;AAKA,MAAMA,QAAQC,QAAQ,SAAR,EAAmBC,cAAnB,CAAkCC,UAAlC,CAAd;AACA,MAAMC,KAAKH,QAAQ,kBAAR,CAAX;AACA,MAAM,EAAEI,IAAF,KAAWJ,QAAQ,6BAAR,CAAjB;AACA,MAAM,EAAEK,IAAF,KAAWL,QAAQ,MAAR,CAAjB;AACA,MAAMM,mBAAmBC,OAAOA,IAAIC,KAAJ,CAAU,GAAV,EAAeH,IAAf,CAAoB,SAApB,CAAhC;AACA,MAAMI,MAAM,MACRJ,KACIK,SADJ,EAEI,QACIC,KAAKC,MAAL,GACKC,QADL,CACc,EADd,EAEKC,KAFL,CAEW,CAFX,CAHR,CADJ;;AASA,MAAMC,uBAAuB,OAAOC,MAAP,EAAeC,GAAf,KAAuB;AAChDlB,UAAO,iBAAgBkB,GAAI,UAA3B;AACA,QAAI;AACA,cAAM,EAAEC,MAAF,EAAUC,MAAV,KAAqB,MAAMf,KAC5B,YAAWE,iBAAiBU,MAAjB,CAAyB,KAAIC,GAAI,EADhB,CAAjC;AAGA,eAAOC,SAAS,MAAT,GAAkBC,MAAzB;AACH,KALD,CAKE,OAAOC,CAAP,EAAU;AACR;AACA;AACA,cAAMC,WAAWC,KAAKA,CAAtB;AACA,cAAMC,qBAAqB,CAACH,EAAEI,OAAF,IAAaJ,CAAd,EAAiBA,EAAED,MAAnB,EAA2BC,EAAEF,MAA7B,EACtBO,MADsB,CACfJ,QADe,EAEtBhB,IAFsB,CAEjB,MAFiB,CAA3B;;AAIA,cAAMqB,iBAAiB,IAAIC,KAAJ,CAAUJ,kBAAV,CAAvB;;AAEAG,uBAAeR,MAAf,GAAwBE,EAAEF,MAA1B;AACAQ,uBAAeP,MAAf,GAAwBC,EAAED,MAA1B;;AAEA,cAAMO,cAAN;AACH;AACJ,CAtBD;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCAE,OAAOC,OAAP,GAAiB,OAAOb,MAAP,EAAec,IAAf,EAAqB,GAAGC,IAAxB,KAAiC;AAC9C,QAAI,OAAOf,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,cAAMW,MAAM,wDAAN,CAAN;AACH;AACD,QAAI,OAAOG,IAAP,KAAgB,UAApB,EAAgC;AAC5B,cAAMH,MAAM,oDAAN,CAAN;AACH;AACD,UAAMK,WAAWF,KAAKjB,QAAL,EAAjB;AACA,UAAMoB,YAAYxB,KAAlB;AACA,UAAMyB,UAAW,IAAGF,QAAS,QAAOG,KAAKC,SAAL,CAAeL,IAAf,CAAqB,GAAzD;AACA,UAAM5B,GAAGkC,SAAH,CAAaJ,SAAb,EAAwBC,OAAxB,EAAiC,MAAjC,CAAN;AACAnC,UAAO,4BAA2BiC,QAAS,EAA3C;AACA,QAAI;AACA,eAAO,MAAMjB,qBACTC,MADS,EAER,GAAEsB,QAAQC,IAAR,CAAa,CAAb,CAAgB,IAAGN,SAAU,EAFvB,CAAb;AAIH,KALD,SAKU;AACN,cAAM9B,GAAGqC,MAAH,CAAUP,SAAV,CAAN;AACH;AACJ,CApBD","file":"run-as-root.js","sourcesContent":["/**\n * Run sandboxed JavaScript as an administrator.\n * @module run-as-root\n */\n\nconst debug = require('./debug').makeFileLogger(__filename);\nconst fs = require('./promisified/fs');\nconst { exec } = require('./promisified/child_process');\nconst { join } = require('path');\nconst escapeBashQuotes = str => str.split('\"').join('\"\\'\"\\'\"');\nconst tmp = () =>\n    join(\n        __dirname,\n        'tmp' +\n            Math.random()\n                .toString(20)\n                .slice(2)\n    );\n\nconst sudoPromptToRunShell = async (prompt, cmd) => {\n    debug(`running \"sudo ${cmd}\" now...`);\n    try {\n        const { stdout, stderr } = await exec(\n            `sudo -p \"${escapeBashQuotes(prompt)}\" ${cmd}`\n        );\n        return stdout + '\\n\\n' + stderr;\n    } catch (e) {\n        // Display all values present,\n        // without a bunch of extra newlines\n        const identity = x => x;\n        const fullOutputForError = [e.message || e, e.stderr, e.stdout]\n            .filter(identity)\n            .join('\\n\\n');\n\n        const formattedError = new Error(fullOutputForError);\n\n        formattedError.stdout = e.stdout;\n        formattedError.stderr = e.stderr;\n\n        throw formattedError;\n    }\n};\n\n/**\n * Prompts the user for an admin password, then runs its callback with\n * administrative privileges.\n *\n * Node should run as an unprivileged user most of the time, but while setting\n * up a workspace and doing system configuration, we might need root access to\n * do one or two things. Normally, you'd do that by creating a different script\n * file with the privileged code, and then create a child Node process under\n * sudo to run that script file:\n *\n *     child_process.exec('sudo node ./different/script/file', callback)\n *\n * This prompts the user for a Sudo password in any TTY attached to the Node\n * process, and waits to run `callback` until the user has authorized or not.\n *\n * This function automates that process.\n *\n * 1. Stringifies its callback and saves it to a temp file\n * 2. Prompts user for credentials\n * 3. Runs the temp file with administrative privileges\n * 4. Returns a Promise that fulfills for the stdout of the script.\n *\n * **Warning:** The callback will run in a different process, and will not be\n * able to access any values in enclosed scope. If the function needs a value\n * from the current environment, pass it in through the `args` array and receive\n * it as a parameter.\n\n * @param {String} prompt Prompt message to display. [sudo -p](https://www.sudo.ws/man/1.8.17/sudo.man.html#p)\n *     variables are interpolated from this string.\n * @param {Function} fn JavaScript code to run. Must be a function. It can take\n *     arguments, which must be passed in order in an array to the following\n *     `args` parameter.\n * @param {Array} args An array of values to be passed as arguments. Must be\n *     serializable to JSON.\n * @returns {Promise<string>} A promise for the console output of the\n *     evaluated code. Rejects if the user did not authorize, or if the code\n *     threw an exception.\n */\nmodule.exports = async (prompt, func, ...args) => {\n    if (typeof prompt !== 'string') {\n        throw Error('runAsRoot takes a prompt string as its first argument.');\n    }\n    if (typeof func !== 'function') {\n        throw Error('runAsRoot takes a function as its second argument.');\n    }\n    const codeText = func.toString();\n    const scriptLoc = tmp();\n    const invoked = `(${codeText})(...${JSON.stringify(args)})`;\n    await fs.writeFile(scriptLoc, invoked, 'utf8');\n    debug(`elevating privileges for ${codeText}`);\n    try {\n        return await sudoPromptToRunShell(\n            prompt,\n            `${process.argv[0]} ${scriptLoc}`\n        );\n    } finally {\n        await fs.unlink(scriptLoc);\n    }\n};\n"]}