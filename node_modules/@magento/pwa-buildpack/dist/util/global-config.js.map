{"version":3,"sources":["../../src/util/global-config.js"],"names":["debug","require","makeFileLogger","__filename","resolve","homedir","createHash","flatfile","toString","x","GlobalConfig","getDbFilePath","db","_dbPromise","Promise","reject","dbFilePath","on","e","constructor","options","Error","errorMsg","key","prefix","length","_makeKey","_prefix","makeKey","keyparts","hash","update","digest","get","set","args","slice","put","error","response","del","values","xform","keys","reduce","out","k","startsWith","push","clear","module","exports"],"mappings":"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","file":"global-config.js","sourcesContent":["const debug = require('./debug').makeFileLogger(__filename);\nconst { resolve } = require('path');\nconst { homedir } = require('os');\nconst { createHash } = require('crypto');\nconst flatfile = require('flat-file-db');\n\nconst toString = x => x.toString();\n\nclass GlobalConfig {\n    static getDbFilePath() {\n        return resolve(homedir(), './.config/pwa-buildpack.db');\n    }\n    static async db() {\n        if (!this._dbPromise) {\n            this._dbPromise = new Promise((resolve, reject) => {\n                try {\n                    const dbFilePath = this.getDbFilePath();\n                    debug(`no cached db exists, pulling db from ${dbFilePath}`);\n                    const db = flatfile(dbFilePath);\n                    debug(`db created, waiting for open event`, db);\n                    db.on('error', reject);\n                    db.on('open', () => {\n                        debug('db open, fulfilling to subscribers');\n                        resolve(db);\n                    });\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        }\n        return this._dbPromise;\n    }\n    constructor(options) {\n        // validation\n        if (typeof options !== 'object') {\n            throw Error(debug.errorMsg('Must provide options.'));\n        }\n\n        const { key = toString, prefix } = options;\n\n        if (typeof key !== 'function') {\n            throw Error(\n                debug.errorMsg('`key` function in options must be a function.')\n            );\n        }\n\n        if (key.length === 0) {\n            throw Error(\n                debug.errorMsg(\n                    'Provided `key` function must take at least on argument.'\n                )\n            );\n        }\n\n        if (typeof prefix !== 'string') {\n            throw Error(\n                debug.errorMsg('Must provide a `prefix` string in options.')\n            );\n        }\n\n        this._makeKey = key;\n        this._prefix = prefix;\n    }\n    makeKey(keyparts) {\n        if (keyparts.length !== this._makeKey.length) {\n            throw Error(\n                `Wrong number of arguments sent to produce unique ${\n                    this._prefix\n                } key`\n            );\n        }\n        const hash = createHash('md5');\n        const key = this._makeKey(...keyparts);\n        if (typeof key !== 'string') {\n            throw Error(\n                debug.errorMsg(\n                    `key function ${this._makeKey.toString()} returned a non-string value: ${key}: ${typeof key}`\n                )\n            );\n        }\n        hash.update(key);\n        return this._prefix + hash.digest('hex');\n    }\n    async get(...keyparts) {\n        debug(`${this._prefix} get()`, keyparts);\n        const db = await this.constructor.db();\n        const key = this.makeKey(keyparts);\n        debug(`${this._prefix} get()`, keyparts, `made key: ${key}`);\n        return db.get(key);\n    }\n    async set(...args) {\n        debug(`${this._prefix} set()`, ...args);\n        const db = await this.constructor.db();\n        const key = this.makeKey(args.slice(0, -1));\n        debug(`${this._prefix} set()`, args, `made key: ${key}`);\n        return new Promise((resolve, reject) =>\n            db.put(\n                key,\n                args.slice(-1)[0],\n                (error, response) => (error ? reject(error) : resolve(response))\n            )\n        );\n    }\n    async del(...keyparts) {\n        const db = await this.constructor.db();\n        const key = this.makeKey(keyparts);\n        return new Promise((resolve, reject) =>\n            db.del(\n                key,\n                (error, response) => (error ? reject(error) : resolve(response))\n            )\n        );\n    }\n    async values(xform = x => x) {\n        const db = await this.constructor.db();\n        return db.keys().reduce((out, k) => {\n            if (k.startsWith(this._prefix)) {\n                out.push(xform(db.get(k)));\n            }\n            return out;\n        }, []);\n    }\n    async clear() {\n        const db = await this.constructor.db();\n        return new Promise((resolve, reject) =>\n            db.clear(error => (error ? reject(error) : resolve()))\n        );\n    }\n}\nmodule.exports = GlobalConfig;\n"]}