{"version":3,"sources":["../../src/util/ssl-cert-store.js"],"names":["GlobalConfig","require","debug","makeFileLogger","__filename","exec","runAsRoot","userCerts","prefix","key","x","module","exports","expired","cert","then","catch","stdout","trim","provide","commonName","Error","errorMsg","certPair","get","del","create","set","name","devcert","certs","process","write","JSON","stringify","parse","e","message","stack"],"mappings":";;AAAA,MAAMA,eAAeC,QAAQ,iBAAR,CAArB;AACA,MAAMC,QAAQD,QAAQ,SAAR,EAAmBE,cAAnB,CAAkCC,UAAlC,CAAd;AACA,MAAM,EAAEC,IAAF,KAAWJ,QAAQ,6BAAR,CAAjB;AACA,MAAMK,YAAYL,QAAQ,eAAR,CAAlB;;AAEA,MAAMM,YAAY,IAAIP,YAAJ,CAAiB;AAC/BQ,YAAQ,SADuB;AAE/BC,SAAKC,KAAKA;AAFqB,CAAjB,CAAlB;;AAKAC,OAAOC,OAAP,GAAiB;AACbL,aADa;AAEb;AACA,UAAMM,OAAN,CAAcC,IAAd,EAAoB;AAChB,eAAOT,KAAM,iCAAgCS,IAAK,GAA3C,EACFC,IADE,CACG,MAAM,KADT,EAEFC,KAFE,CAEI,CAAC,EAAEC,MAAF,EAAD,KAAgBA,OAAOC,IAAP,OAAkB,yBAFtC,CAAP;AAGH,KAPY;AAQb,UAAMC,OAAN,CAAcC,UAAd,EAA0B;AACtB,YAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAChC,kBAAMC,MACFnB,MAAMoB,QAAN,CACK,8EAA6EF,UAAW,EAD7F,CADE,CAAN;AAKH;AACD,YAAIG,WAAW,MAAMhB,UAAUiB,GAAV,CAAcJ,UAAd,CAArB;AACA,YAAIG,aAAa,MAAM,KAAKV,OAAL,CAAaU,SAAST,IAAtB,CAAnB,CAAJ,EAAqD;AACjDS,uBAAW,IAAX;AACA,kBAAMhB,UAAUkB,GAAV,CAAcL,UAAd,CAAN;AACH;AACD,YAAI,CAACG,QAAL,EAAe;AACXA,uBAAW,MAAM,KAAKG,MAAL,CAAYN,UAAZ,CAAjB;AACA,kBAAMb,UAAUoB,GAAV,CAAcP,UAAd,EAA0BG,QAA1B,CAAN;AACH;AACD,eAAOA,QAAP;AACH,KA1BY;AA2Bb,UAAMG,MAAN,CAAaN,UAAb,EAAyB;AACrB,YAAI;AACA,kBAAMN,OAAO,MAAMR,UACf,sIADe;AAEf;AACA,kBAAMsB,IAAN,IAAc;AACV,sBAAMC,UAAU5B,QAAQ,kBAAR,CAAhB;AACA,sBAAM6B,QAAQ,MAAMD,QAAQD,IAAR,CAApB;AACAG,wBAAQd,MAAR,CAAee,KAAf,CAAqBC,KAAKC,SAAL,CAAeJ,KAAf,CAArB;AACH,aAPc,EAQfV,UARe,CAAnB;AAUA,mBAAOa,KAAKE,KAAL,CAAWrB,IAAX,CAAP;AACH,SAZD,CAYE,OAAOsB,CAAP,EAAU;AACR,kBAAMf,MACFnB,MAAMoB,QAAN,CACK,qCAAoCc,EAAEC,OAAQ,IAAGD,EAAEE,KAAM,EAD9D,CADE,CAAN;AAKH;AACJ;AA/CY,CAAjB","file":"ssl-cert-store.js","sourcesContent":["const GlobalConfig = require('./global-config');\nconst debug = require('./debug').makeFileLogger(__filename);\nconst { exec } = require('./promisified/child_process');\nconst runAsRoot = require('./run-as-root');\n\nconst userCerts = new GlobalConfig({\n    prefix: 'devcert',\n    key: x => x\n});\n\nmodule.exports = {\n    userCerts,\n    // treat a certificate as basically expired if it'll expire in 1 day (86400s)\n    async expired(cert) {\n        return exec(`openssl x509 -checkend 0 <<< \"${cert}\"`)\n            .then(() => false)\n            .catch(({ stdout }) => stdout.trim() === 'Certificate will expire');\n    },\n    async provide(commonName) {\n        if (typeof commonName !== 'string') {\n            throw Error(\n                debug.errorMsg(\n                    `Must provide a commonName to SSLCertStore.provide(). Instead, argument was ${commonName}`\n                )\n            );\n        }\n        let certPair = await userCerts.get(commonName);\n        if (certPair && (await this.expired(certPair.cert))) {\n            certPair = null;\n            await userCerts.del(commonName);\n        }\n        if (!certPair) {\n            certPair = await this.create(commonName);\n            await userCerts.set(commonName, certPair);\n        }\n        return certPair;\n    },\n    async create(commonName) {\n        try {\n            const cert = await runAsRoot(\n                'Creating and trusting an SSL certificate for local dev requires temporary administrative privileges.\\n Enter password for %u on %H: ',\n                /* istanbul ignore next: this runs out of band in another process, hard to test */\n                async name => {\n                    const devcert = require('@magento/devcert');\n                    const certs = await devcert(name);\n                    process.stdout.write(JSON.stringify(certs));\n                },\n                commonName\n            );\n            return JSON.parse(cert);\n        } catch (e) {\n            throw Error(\n                debug.errorMsg(\n                    `Error generating dev certificate: ${e.message} ${e.stack}`\n                )\n            );\n        }\n    }\n};\n"]}