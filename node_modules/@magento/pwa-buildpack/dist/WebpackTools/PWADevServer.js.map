{"version":3,"sources":["../../src/WebpackTools/PWADevServer.js"],"names":["debug","require","makeFileLogger","__filename","join","createHash","url","express","GlobalConfig","SSLCertStore","optionsValidator","middlewares","originSubstitution","devProxy","staticRootRoute","lookup","find","findPort","runAsRoot","PWADevServer","DEFAULT_NAME","DEV_DOMAIN","validateConfig","publicPath","backendDomain","serviceWorkerFileName","portsByHostname","prefix","key","x","setLoopback","hostname","ip","e","code","Error","errorMsg","message","address","d","set","findFreePort","reserved","values","Number","startingPort","endingPort","avoid","catch","getDbFilePath","toString","getUniqueSubdomain","customName","name","pkgLoc","process","cwd","pkg","console","warn","dirHash","update","digest","slice","toLowerCase","replace","provideUniqueHost","provideCustomHost","subdomain","usualPort","freePort","Promise","all","get","port","protocol","configure","config","devServerConfig","contentBase","compress","hot","host","stats","builtAt","colors","errors","errorDetails","moduleTrace","timings","version","warnings","before","app","changeOrigin","use","URL","paths","output","after","static","assets","target","devHost","id","provideSSLCert","https","provide","format","pathname","module","exports"],"mappings":"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","file":"PWADevServer.js","sourcesContent":["const debug = require('../util/debug').makeFileLogger(__filename);\nconst { join } = require('path');\nconst { createHash } = require('crypto');\nconst url = require('url');\nconst express = require('express');\nconst GlobalConfig = require('../util/global-config');\nconst SSLCertStore = require('../util/ssl-cert-store');\nconst optionsValidator = require('../util/options-validator');\nconst middlewares = {\n    originSubstitution: require('./middlewares/OriginSubstitution'),\n    devProxy: require('./middlewares/DevProxy'),\n    staticRootRoute: require('./middlewares/StaticRootRoute')\n};\nconst { lookup } = require('../util/promisified/dns');\nconst { find: findPort } = require('../util/promisified/openport');\nconst runAsRoot = require('../util/run-as-root');\nconst PWADevServer = {\n    DEFAULT_NAME: 'my-pwa',\n    DEV_DOMAIN: 'local.pwadev',\n    validateConfig: optionsValidator('PWADevServer', {\n        publicPath: 'string',\n        backendDomain: 'string',\n        'paths.output': 'string',\n        'paths.assets': 'string',\n        serviceWorkerFileName: 'string'\n    }),\n    portsByHostname: new GlobalConfig({\n        prefix: 'devport-byhostname',\n        key: x => x\n    }),\n    async setLoopback(hostname) {\n        debug(`checking if ${hostname} is loopback`);\n        let ip;\n        try {\n            ip = await lookup(hostname);\n        } catch (e) {\n            if (e.code !== 'ENOTFOUND') {\n                throw Error(\n                    debug.errorMsg(\n                        `Error trying to check that ${hostname} is loopback: ${\n                            e.message\n                        }`\n                    )\n                );\n            }\n        }\n        if (ip && (ip.address === '127.0.0.1' || ip.address === '::1')) {\n            debug(`${hostname} already resolves to ${ip.address}!`);\n        } else {\n            debug(\n                `setting ${hostname} loopback in /etc/hosts, may require password...`\n            );\n            return runAsRoot(\n                `Resolving ${hostname} to localhost and editing the hostfile requires temporary administrative privileges.\\n Enter password for %u on %H: `,\n                /* istanbul ignore next: never runs in process */\n                d => require('hostile').set('127.0.0.1', d),\n                hostname\n            );\n        }\n    },\n    async findFreePort() {\n        const reserved = await PWADevServer.portsByHostname.values(Number);\n        debug(`findFreePort(): these ports already reserved`, reserved);\n        return findPort({\n            startingPort: 8000,\n            endingPort: 9999,\n            avoid: reserved\n        }).catch(e => {\n            throw Error(\n                debug.errorMsg(\n                    `Unable to find an open port. You may want to delete your database file at ${GlobalConfig.getDbFilePath()} to clear out old developer hostname entries. (Soon we will make this easier and more automatic.) Original error: ${e.toString()}`\n                )\n            );\n        });\n    },\n    getUniqueSubdomain(customName) {\n        let name = PWADevServer.DEFAULT_NAME;\n        if (typeof customName === 'string') {\n            name = customName;\n        } else {\n            const pkgLoc = join(process.cwd(), 'package.json');\n            try {\n                // eslint-disable-next-line node/no-missing-require\n                const pkg = require(pkgLoc);\n                if (!pkg.name || typeof pkg.name !== 'string') {\n                    throw new Error(\n                        `package.json does not have a usable \"name\" field!`\n                    );\n                }\n                name = pkg.name;\n            } catch (e) {\n                console.warn(\n                    debug.errorMsg(\n                        `getUniqueSubdomain(): Using default \"${name}\" prefix. Could not autodetect theme name from package.json: `\n                    ),\n                    e\n                );\n            }\n        }\n        const dirHash = createHash('md4');\n        // Using a hash of the current directory is a natural way of preserving\n        // the same \"unique\" ID for each project, and changing it only when its\n        // location on disk has changed.\n        dirHash.update(process.cwd());\n        const digest = dirHash.digest('base64');\n        // Base64 truncated to 5 characters, stripped of special characters,\n        // and lowercased to be a valid domain, is about 36^5 unique values.\n        // There is therefore a chance of a duplicate ID and host collision,\n        // specifically a 1 in 60466176 chance.\n        return `${name}-${digest.slice(0, 5)}`\n            .toLowerCase()\n            .replace(/[^a-zA-Z0-9]/g, '-')\n            .replace(/^-+/, '');\n    },\n    async provideUniqueHost(prefix) {\n        debug(`provideUniqueHost ${prefix}`);\n        return PWADevServer.provideCustomHost(\n            PWADevServer.getUniqueSubdomain(prefix)\n        );\n    },\n    async provideCustomHost(subdomain) {\n        debug(`provideUniqueHost ${subdomain}`);\n        const hostname = subdomain + '.' + PWADevServer.DEV_DOMAIN;\n\n        const [usualPort, freePort] = await Promise.all([\n            PWADevServer.portsByHostname.get(hostname),\n            PWADevServer.findFreePort()\n        ]);\n        const port = usualPort === freePort ? usualPort : freePort;\n\n        if (!usualPort) {\n            PWADevServer.portsByHostname.set(hostname, port);\n        } else if (usualPort !== freePort) {\n            console.warn(\n                debug.errorMsg(\n                    `This project's dev server normally runs at ${hostname}:${usualPort}, but port ${usualPort} is in use. The dev server will instead run at ${hostname}:${port}, which may cause a blank or unexpected cache and ServiceWorker. Consider fully clearing your browser cache.`\n                )\n            );\n        }\n\n        PWADevServer.setLoopback(hostname);\n\n        return {\n            protocol: 'https:',\n            hostname,\n            port\n        };\n    },\n    async configure(config) {\n        debug('configure() invoked', config);\n        PWADevServer.validateConfig('.configure(config)', config);\n        const devServerConfig = {\n            contentBase: false,\n            compress: true,\n            hot: true,\n            host: 'localhost',\n            stats: {\n                all: false,\n                builtAt: true,\n                colors: true,\n                errors: true,\n                errorDetails: true,\n                moduleTrace: true,\n                timings: true,\n                version: true,\n                warnings: true\n            },\n            before(app) {\n                if (config.changeOrigin) {\n                    // replace origins in links in returned html\n                    app.use(\n                        middlewares.originSubstitution(\n                            new url.URL(config.backendDomain),\n                            {\n                                hostname: devServerConfig.host,\n                                port: devServerConfig.port\n                            }\n                        )\n                    );\n                }\n                // serviceworker root route\n                app.use(\n                    middlewares.staticRootRoute(\n                        join(config.paths.output, config.serviceWorkerFileName)\n                    )\n                );\n            },\n            after(app) {\n                // set static server to load and serve from different paths\n                app.use(config.publicPath, express.static(config.paths.assets));\n\n                // proxy to backend\n                app.use(\n                    middlewares.devProxy({\n                        target: config.backendDomain\n                    })\n                );\n            }\n        };\n        let devHost;\n        if (config.id) {\n            devHost = await PWADevServer.provideCustomHost(config.id);\n        } else if (config.provideUniqueHost) {\n            devHost = await PWADevServer.provideUniqueHost(\n                config.provideUniqueHost\n            );\n        }\n        if (devHost) {\n            devServerConfig.host = devHost.hostname;\n            devServerConfig.port = devHost.port;\n        } else {\n            devServerConfig.port = await PWADevServer.findFreePort();\n        }\n        if (config.provideSSLCert) {\n            devServerConfig.https = await SSLCertStore.provide(\n                devServerConfig.host\n            );\n        }\n        devServerConfig.publicPath = url.format({\n            protocol: config.provideSSLCert ? 'https:' : 'http:',\n            hostname: devServerConfig.host,\n            port: devServerConfig.port,\n            pathname: config.publicPath\n        });\n\n        return devServerConfig;\n    }\n};\nmodule.exports = PWADevServer;\n"]}