{"version":3,"sources":["../../../../src/WebpackTools/plugins/MagentoRootComponentsPlugin/index.js"],"names":["isAbsolute","join","require","RawSource","rootComponentMap","seenRootComponents","loaderPath","__dirname","MagentoRootComponentsPlugin","constructor","opts","rootComponentsDirs","manifestFileName","phase","apply","compiler","context","options","rootComponentsDirsAbs","map","dir","moduleByPath","Map","plugin","compilation","loaderContext","mod","has","resource","set","isEntrySimpleTest","includes","issuer","isAnEntry","entries","some","entryMod","identifier","startsWith","dependencies","singleDep","module","loaders","push","loader","rootsDirs","cb","namedChunks","Array","from","Object","values","manifest","reduce","acc","chunk","rootDirective","rootComponentPath","get","name","rootComponentFilename","files","assign","chunkName","rootChunkID","id","rootModuleID","assets","JSON","stringify","exports"],"mappings":"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","file":"index.js","sourcesContent":["const { isAbsolute, join } = require('path');\nconst { RawSource } = require('webpack-sources');\nconst {\n    rootComponentMap,\n    seenRootComponents\n} = require('./roots-chunk-loader');\n\nconst loaderPath = join(__dirname, 'roots-chunk-loader.js');\n\n/**\n * @description webpack plugin that creates chunks for each\n * individual RootComponent in a store, and generates a manifest\n * with data for consumption by the backend.\n */\nclass MagentoRootComponentsPlugin {\n    /**\n     * @param {object} opts\n     * @param {string[]} opts.rootComponentsDirs All directories to be searched for RootComponents\n     * @param {string} opts.manifestFileName Name of the manifest file to be emitted from the build\n     */\n    constructor(opts = {}) {\n        const { rootComponentsDirs, manifestFileName, phase } = opts;\n        this.rootComponentsDirs = rootComponentsDirs || [\n            './src/RootComponents'\n        ];\n        this.manifestFileName = manifestFileName || 'roots-manifest.json';\n        this.phase = phase;\n    }\n\n    apply(compiler) {\n        const { context } = compiler.options;\n        const { rootComponentsDirs } = this;\n\n        // Create a list of absolute paths for root components. When a\n        // relative path is found, resolve it from the root context of\n        // the webpack build\n        const rootComponentsDirsAbs = rootComponentsDirs.map(\n            dir => (isAbsolute(dir) ? dir : join(context, dir))\n        );\n\n        const moduleByPath = new Map();\n        compiler.plugin('compilation', compilation => {\n            compilation.plugin('normal-module-loader', (loaderContext, mod) => {\n                if (seenRootComponents.has(mod.resource)) {\n                    // The module (\"mod\") has not been assigned an ID yet,\n                    // so we need to keep a reference to it which will allow\n                    // us to grab the ID during the emit phase\n                    moduleByPath.set(mod.resource, mod);\n                }\n\n                // To create a unique chunk for each RootComponent, we want to inject\n                // a dynamic import() for each RootComponent, within each entry point.\n\n                // But identifying entry points is hard!\n\n                // Top-level modules injected by a downstream \"issuer\" are not\n                // entry points.\n                const isEntrySimpleTest =\n                    this.phase === 'development'\n                        ? mod => mod.resource.includes('/node_modules/')\n                        : mod => !mod.issuer;\n\n                const isAnEntry =\n                    isEntrySimpleTest(mod) &&\n                    // Otherwise, check if the module being constructed matches a defined entry point\n                    compilation.entries.some(entryMod => {\n                        if (mod === entryMod) {\n                            return true;\n                        }\n                        if (!entryMod.identifier().startsWith('multi')) {\n                            return false;\n                        }\n                        // need to try and match against each dependency in the multi module\n                        return entryMod.dependencies.some(\n                            singleDep => singleDep.module === mod\n                        );\n                    });\n                if (!isAnEntry) return;\n\n                // If this module is an entry module, inject a loader in the pipeline\n                // that will force creation of all our RootComponent chunks\n                mod.loaders.push({\n                    loader: loaderPath,\n                    options: {\n                        rootsDirs: rootComponentsDirsAbs\n                    }\n                });\n            });\n        });\n\n        compiler.plugin('emit', (compilation, cb) => {\n            // Prepare the manifest that the Magento backend can use\n            // to pick root components for a page.\n            const namedChunks = Array.from(\n                Object.values(compilation.namedChunks)\n            );\n            const manifest = namedChunks.reduce((acc, chunk) => {\n                const { rootDirective, rootComponentPath } =\n                    rootComponentMap.get(chunk.name) || {};\n                if (!rootDirective) return acc;\n\n                // Index 0 is always the chunk, but it's an Array because\n                // there could be a source map (which we don't care about)\n                const [rootComponentFilename] = chunk.files;\n                acc[chunk.name] = Object.assign(\n                    {\n                        chunkName: rootComponentFilename,\n                        rootChunkID: chunk.id,\n                        rootModuleID: moduleByPath.get(rootComponentPath).id\n                    },\n                    rootDirective\n                );\n                return acc;\n            }, {});\n\n            compilation.assets[this.manifestFileName] = new RawSource(\n                JSON.stringify(manifest, null, 4)\n            );\n            cb();\n        });\n    }\n}\n\nmodule.exports = MagentoRootComponentsPlugin;\n"]}