{"version":3,"sources":["../../../src/WebpackTools/plugins/ServiceWorkerPlugin.js"],"names":["WorkboxPlugin","require","WriteFileWebpackPlugin","optionsValidator","ServiceWorkerPlugin","constructor","config","validateOptions","applyWorkbox","compiler","globDirectory","paths","assets","globPatterns","skipWaiting","swDest","serviceWorkerFileName","runtimeCacheAssetPath","runtimeCaching","urlPattern","RegExp","handler","GenerateSW","apply","env","phase","enableServiceWorkerDebugging","test","log","console","warn","module","exports"],"mappings":";;AAAA;AACA,MAAMA,gBAAgBC,QAAQ,wBAAR,CAAtB;AACA,MAAMC,yBAAyBD,QAAQ,2BAAR,CAA/B;AACA,MAAME,mBAAmBF,QAAQ,8BAAR,CAAzB;;AAEA,MAAMG,mBAAN,CAA0B;AAMtBC,gBAAYC,MAAZ,EAAoB;AAChBF,4BAAoBG,eAApB,CAAoC,qBAApC,EAA2DD,MAA3D;AACA,aAAKA,MAAL,GAAcA,MAAd;AACH;AACDE,iBAAaC,QAAb,EAAuB;AACnB,cAAMH,SAAS;AACX;AACA;AACAI,2BAAe,KAAKJ,MAAL,CAAYK,KAAZ,CAAkBC,MAHtB;AAIX;AACAC,0BAAc,CAAC,wBAAD,CALH;;AAOX;AACAC,yBAAa,IARF;;AAUX;AACAC,oBAAQ,KAAKT,MAAL,CAAYU;AAXT,SAAf;;AAcA,YAAI,KAAKV,MAAL,CAAYW,qBAAhB,EAAuC;AACnCX,mBAAOY,cAAP,GAAwB,CACpB;AACIC,4BAAY,IAAIC,MAAJ,CAAW,KAAKd,MAAL,CAAYW,qBAAvB,CADhB;AAEII,yBAAS;AAFb,aADoB,CAAxB;AAMH;AACD,YAAIrB,cAAcsB,UAAlB,CAA6BhB,MAA7B,EAAqCiB,KAArC,CAA2Cd,QAA3C;AACH;AACDc,UAAMd,QAAN,EAAgB;AACZ,YAAI,KAAKH,MAAL,CAAYkB,GAAZ,CAAgBC,KAAhB,KAA0B,aAA9B,EAA6C;AACzC;AACA,gBAAI,KAAKnB,MAAL,CAAYoB,4BAAhB,EAA8C;AAC1C,oBAAIxB,sBAAJ,CAA2B;AACvByB,0BAAM,IAAIP,MAAJ,CAAW,KAAKd,MAAL,CAAYU,qBAAZ,GAAoC,GAA/C,CADiB;AAEvBY,yBAAK;AAFkB,iBAA3B,EAGGL,KAHH,CAGSd,QAHT;AAIA,qBAAKD,YAAL,CAAkBC,QAAlB;AACH,aAND,MAMO;AACH;AACA;AACAoB,wBAAQC,IAAR,CACK,uLADL;AAGH;AACJ,SAfD,MAeO;AACH,iBAAKtB,YAAL,CAAkBC,QAAlB;AACH;AACJ;AAtDqB;sBAApBL,mB;;;WACuBD,iBAAiB,qBAAjB,EAAwC;AAC7D,qBAAa,QADgD;AAE7Da,+BAAuB,QAFsC;AAG7D,wBAAgB;AAH6C,KAAxC;;AAuD7Be,OAAOC,OAAP,GAAiB5B,mBAAjB","file":"ServiceWorkerPlugin.js","sourcesContent":["// TODO: (p1) write test file and test\nconst WorkboxPlugin = require('workbox-webpack-plugin');\nconst WriteFileWebpackPlugin = require('write-file-webpack-plugin');\nconst optionsValidator = require('../../util/options-validator');\n\nclass ServiceWorkerPlugin {\n    static validateOptions = optionsValidator('ServiceWorkerPlugin', {\n        'env.phase': 'string',\n        serviceWorkerFileName: 'string',\n        'paths.assets': 'string'\n    });\n    constructor(config) {\n        ServiceWorkerPlugin.validateOptions('ServiceWorkerPlugin', config);\n        this.config = config;\n    }\n    applyWorkbox(compiler) {\n        const config = {\n            // `globDirectory` and `globPatterns` must match at least 1 file\n            // otherwise workbox throws an error\n            globDirectory: this.config.paths.assets,\n            // TODO: (feature) autogenerate glob patterns from asset manifest\n            globPatterns: ['**/*.{gif,jpg,png,svg}'],\n\n            // activate the worker as soon as it reaches the waiting phase\n            skipWaiting: true,\n\n            // the max scope of a worker is its location\n            swDest: this.config.serviceWorkerFileName\n        };\n\n        if (this.config.runtimeCacheAssetPath) {\n            config.runtimeCaching = [\n                {\n                    urlPattern: new RegExp(this.config.runtimeCacheAssetPath),\n                    handler: 'staleWhileRevalidate'\n                }\n            ];\n        }\n        new WorkboxPlugin.GenerateSW(config).apply(compiler);\n    }\n    apply(compiler) {\n        if (this.config.env.phase === 'development') {\n            // add a WriteFilePlugin to write out the service worker to the filesystem so it can be served by M2, even though it's under dev\n            if (this.config.enableServiceWorkerDebugging) {\n                new WriteFileWebpackPlugin({\n                    test: new RegExp(this.config.serviceWorkerFileName + '$'),\n                    log: true\n                }).apply(compiler);\n                this.applyWorkbox(compiler);\n            } else {\n                // TODO: (feature) emit a structured { code, severity, resolution } object\n                // on Environment that might throw and might not\n                console.warn(\n                    `Emitting no ServiceWorker in development phase. To enable development phase for ServiceWorkers, pass \\`enableServiceWorkerDebugging: true\\` to the ServiceWorkerPlugin configuration.`\n                );\n            }\n        } else {\n            this.applyWorkbox(compiler);\n        }\n    }\n}\nmodule.exports = ServiceWorkerPlugin;\n"]}