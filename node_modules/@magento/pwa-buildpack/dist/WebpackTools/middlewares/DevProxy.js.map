{"version":3,"sources":["../../../src/WebpackTools/middlewares/DevProxy.js"],"names":["proxyMiddleware","require","optionsValidator","format","URL","RedirectCodes","findRedirect","message","includes","statusCode","headers","location","emitErrorOnProtocolChange","emit","target","redirected","backend","host","protocol","Error","Object","assign","validateConfig","module","exports","createDevProxy","config","proxyConf","logLevel","logProvider","defaultProvider","logger","onProxyRes","proxyRes","nextCallback","secure","changeOrigin","autoRewrite","cookieDomainRewrite","proxy","req","res","next","err","console","error"],"mappings":";;AAAA;;;;;;;AAOA,MAAMA,kBAAkBC,QAAQ,uBAAR,CAAxB;AACA,MAAMC,mBAAmBD,QAAQ,8BAAR,CAAzB;AACA,MAAM,EAAEE,MAAF,EAAUC,GAAV,KAAkBH,QAAQ,KAAR,CAAxB;;AAEA,MAAMI,gBAAgB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,CAAtB;AACA,MAAMC,eAAeC,WACjBF,cAAcG,QAAd,CAAuBD,QAAQE,UAA/B,KAA8CF,QAAQG,OAAR,CAAgBC,QADlE;;AAGA,MAAMC,4BAA4B,CAACC,IAAD,EAAOC,MAAP,EAAeC,UAAf,KAA8B;AAC5D,UAAMC,UAAU,IAAIZ,GAAJ,CAAQU,MAAR,CAAhB;AACA,UAAM,EAAEG,IAAF,EAAQC,QAAR,KAAqB,IAAId,GAAJ,CAAQW,UAAR,CAA3B;AACA,QAAIC,QAAQC,IAAR,KAAiBA,IAAjB,IAAyBD,QAAQE,QAAR,KAAqBA,QAAlD,EAA4D;AACxD;AACH;;AAED,QAAIF,QAAQE,QAAR,KAAqB,QAArB,IAAiCA,aAAa,OAAlD,EAA2D;AACvD,eAAOL,KACH,IAAIM,KAAJ,CACK,kDAAiDL,MAAO,gFAD7D,CADG,CAAP;AAKH;;AAED,QAAIE,QAAQE,QAAR,KAAqB,OAArB,IAAgCA,aAAa,QAAjD,EAA2D;AACvD,eAAOL,KACH,IAAIM,KAAJ,CACK,kDAAiDL,MAAO,oGAAmGX,OACxJiB,OAAOC,MAAP,CAAcL,OAAd,EAAuB,EAAEE,UAAU,QAAZ,EAAvB,CADwJ,CAE1J,GAHN,CADG,CAAP;AAOH;;AAEDL,SACI,IAAIM,KAAJ,CACK,iEAAgEJ,UAAW,EADhF,CADJ;AAKH,CA9BD;;AAgCA,MAAMO,iBAAiBpB,iBAAiB,oBAAjB,EAAuC;AAC1DY,YAAQ;AADkD,CAAvC,CAAvB;;AAIAS,OAAOC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,MAAxB,EAAgC;AAC7CJ,mBAAe,gBAAf,EAAiCI,MAAjC;AACA,UAAMC,YAAYP,OAAOC,MAAP,CACd;AACIO,kBAAU,OADd;AAEIC,qBAAaC,mBAAmBJ,OAAOK,MAAP,IAAiBD,eAFrD;AAGIE,mBAAWC,QAAX,EAAqB;AACjB,kBAAMlB,aAAaT,aAAa2B,QAAb,CAAnB;AACA,gBAAIlB,UAAJ,EAAgB;AACZH,0CACIsB,YADJ,EAEIR,OAAOZ,MAFX,EAGIC,UAHJ;AAKH;AACJ,SAZL;AAaIoB,gBAAQ,KAbZ;AAcIC,sBAAc,IAdlB;AAeIC,qBAAa,IAfjB;AAgBIC,6BAAqB,EAhBzB,CAgB4B;AAhB5B,KADc,EAmBdZ,MAnBc,CAAlB;AAqBA,QAAIQ,YAAJ;AACA,UAAMK,QAAQvC,gBAAgB,IAAhB,EAAsB2B,SAAtB,CAAd;AACA;AACA;AACA,WAAO,CAACa,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACvBR,uBAAeS,OAAO;AAClBhB,sBAAUE,WAAV,CAAsBe,OAAtB,EAA+BC,KAA/B,CAAqCF,GAArC;AACA,mBAAOD,KAAKC,GAAL,CAAP;AACH,SAHD;AAIA,eAAOJ,MAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,CAAP;AACH,KAND;AAOH,CAlCD","file":"DevProxy.js","sourcesContent":["/**\n * Proxies all requests not served by Webpack in-memory bundling back\n * to the underlying store.\n *\n * Tries to detect a case where the target URL is misconfigured and the\n * store tries to redirect to http or https.\n */\nconst proxyMiddleware = require('http-proxy-middleware');\nconst optionsValidator = require('../../util/options-validator');\nconst { format, URL } = require('url');\n\nconst RedirectCodes = [201, 301, 302, 307, 308];\nconst findRedirect = message =>\n    RedirectCodes.includes(message.statusCode) && message.headers.location;\n\nconst emitErrorOnProtocolChange = (emit, target, redirected) => {\n    const backend = new URL(target);\n    const { host, protocol } = new URL(redirected);\n    if (backend.host === host && backend.protocol === protocol) {\n        return;\n    }\n\n    if (backend.protocol === 'https:' && protocol === 'http:') {\n        return emit(\n            new Error(\n                `pwa-buildpack: Backend domain is configured to ${target}, but redirected to unsecure HTTP. Please configure backend server to use SSL.`\n            )\n        );\n    }\n\n    if (backend.protocol === 'http:' && protocol === 'https:') {\n        return emit(\n            new Error(\n                `pwa-buildpack: Backend domain is configured to ${target}, but redirected to secure HTTPS. Please change configuration to point to secure backend domain: ${format(\n                    Object.assign(backend, { protocol: 'https:' })\n                )}.`\n            )\n        );\n    }\n\n    emit(\n        new Error(\n            `pwa-buildpack: Backend domain redirected to unknown protocol: ${redirected}`\n        )\n    );\n};\n\nconst validateConfig = optionsValidator('DevProxyMiddleware', {\n    target: 'string'\n});\n\nmodule.exports = function createDevProxy(config) {\n    validateConfig('createDevProxy', config);\n    const proxyConf = Object.assign(\n        {\n            logLevel: 'debug',\n            logProvider: defaultProvider => config.logger || defaultProvider,\n            onProxyRes(proxyRes) {\n                const redirected = findRedirect(proxyRes);\n                if (redirected) {\n                    emitErrorOnProtocolChange(\n                        nextCallback,\n                        config.target,\n                        redirected\n                    );\n                }\n            },\n            secure: false,\n            changeOrigin: true,\n            autoRewrite: true,\n            cookieDomainRewrite: '' // remove any absolute domain on cookies\n        },\n        config\n    );\n    let nextCallback;\n    const proxy = proxyMiddleware('**', proxyConf);\n    // Return an outer middleware so we can access the `next` function to\n    // properly pass errors along.\n    return (req, res, next) => {\n        nextCallback = err => {\n            proxyConf.logProvider(console).error(err);\n            return next(err);\n        };\n        return proxy(req, res, next);\n    };\n};\n"]}