"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cmdExists = require("command-exists");
const util = require("util");
const fs = require("./fs-promisified");
const install_authority_1 = require("./install-authority");
const commandExists = util.promisify(cmdExists);
const openssl_1 = require("./openssl");
async function generateDevCert(commonName) {
    if (!(await commandExists('openssl'))) {
        throw new Error('Unable to find openssl - make sure it is installed and available in your PATH');
    }
    if (!commonName.match(/^(.|\.){1,64}$/)) {
        throw new Error(`Invalid Common Name ${commonName}.`);
    }
    try {
        const opensslConfPath = await openssl_1.generateOpensslConf(commonName);
        const caPaths = await openssl_1.generateRootCertificate(commonName, opensslConfPath);
        await install_authority_1.default(commonName, caPaths.certFilePath);
        const { keyFilePath, certFilePath } = await openssl_1.generateSignedCertificate(commonName, opensslConfPath, caPaths);
        const [key, cert, ca] = await Promise.all([keyFilePath, certFilePath, caPaths.certFilePath].map(filepath => fs.readFile(filepath, 'utf8')));
        return { ca, cert, commonName, key };
    }
    finally {
        // clear all tmp files (including root cert!)
        await openssl_1.tmpClear();
    }
}
exports.default = generateDevCert;
//# sourceMappingURL=index.js.map