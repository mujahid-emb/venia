"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const os_1 = require("os");
const path_1 = require("path");
const x509 = require("x509.js");
const fs_promisified_1 = require("../../fs-promisified");
const rndFile = path_1.join(os_1.tmpdir(), Math.round(Math.random() * 36 ** 10).toString(36));
function openssl(cmd, stdin) {
    return new Promise((resolve, reject) => {
        const child = child_process_1.exec(`openssl ${cmd}`, {
            env: Object.assign({ RANDFILE: rndFile }, process.env),
            windowsHide: true
        }, (error, stdout, stderr) => {
            if (error) {
                reject(error);
            }
            else if (stdout === '' && stderr !== '') {
                reject(stderr);
            }
            else {
                resolve(stdout);
            }
        });
        if (stdin) {
            child.stdin.write(stdin);
        }
    });
}
exports.openssl = openssl;
async function checkPrivateKey(keyText) {
    return /key ok/.test(await openssl('rsa -check -noout', keyText));
}
exports.checkPrivateKey = checkPrivateKey;
async function checkPrivateKeyFile(keyFile) {
    return checkPrivateKey(await fs_promisified_1.readFile(keyFile, 'utf8'));
}
exports.checkPrivateKeyFile = checkPrivateKeyFile;
// Adds openssl purposes (experimental) if available
async function parseCertificate(certText) {
    const info = x509.parseCert(certText);
    const purposesText = await openssl('x509 -purpose -noout', certText);
    info.purposes = purposesText.split('\n').reduce((out, line) => {
        const matches = line.match(/^\s*(.+?)\s*:\s*(Yes|No)\s*/);
        if (matches) {
            out[matches[1]] = matches[2] === 'Yes';
        }
        return out;
    }, {});
    return info;
}
exports.parseCertificate = parseCertificate;
async function parseCertificateFile(certFile) {
    return parseCertificate(await fs_promisified_1.readFile(certFile, 'utf8'));
}
exports.parseCertificateFile = parseCertificateFile;
var ini_1 = require("ini");
exports.parseConf = ini_1.parse;
//# sourceMappingURL=ssl.js.map