{"version":3,"sources":["../../src/Router/MagentoRouteHandler.js"],"names":["createElement","Component","string","shape","resolveUnknownRoute","fetchRootComponent","MagentoRouteHandler","state","componentDidMount","getRouteComponent","props","location","pathname","componentWillReceiveProps","nextProps","changed","seen","apiBase","__tmp_webpack_public_path__","route","then","rootChunkID","rootModuleID","matched","id","Error","setState","catch","err","console","log","render","routeInfo","routeProps","propTypes","isRequired"],"mappings":";AAAA,SAASA,aAAT,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,YAA9B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAEA,eAAe,MAAMC,mBAAN,SAAkCL,SAAlC,CAA4C;AAAA;AAAA;;AAAA,4CASvDM,KATuD,GAS/C,EAT+C;AAAA;;AAWvDC,wBAAoB;AAChB,aAAKC,iBAAL,CAAuB,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,QAA3C;AACH;;AAEDC,8BAA0BC,SAA1B,EAAqC;AACjC,cAAM,EAAEH,QAAF,KAAe,KAAKD,KAA1B;AACA,cAAMK,UAAUD,UAAUH,QAAV,CAAmBC,QAAnB,KAAgCD,SAASC,QAAzD;AACA,cAAMI,OAAO,CAAC,CAAC,KAAKT,KAAL,CAAWO,UAAUH,QAAV,CAAmBC,QAA9B,CAAf;;AAEA,YAAIG,WAAW,CAACC,IAAhB,EAAsB;AAClB,iBAAKP,iBAAL,CAAuBK,UAAUH,QAAV,CAAmBC,QAA1C;AACH;AACJ;;AAEDH,sBAAkBG,QAAlB,EAA4B;AACxB,cAAM,EAAEK,OAAF,EAAWC,2BAAX,KAA2C,KAAKR,KAAtD;;AAEAN,4BAAoB;AAChBe,mBAAOP,QADS;AAEhBK,mBAFgB;AAGhBC;AAHgB,SAApB,EAKKE,IALL,CAKU,CAAC,EAAEC,WAAF,EAAeC,YAAf,EAA6BC,OAA7B,EAAsCC,EAAtC,EAAD,KAAgD;AAClD,gBAAI,CAACD,OAAL,EAAc;AACV;AACA;AACA,sBAAM,IAAIE,KAAJ,CAAU,KAAV,CAAN;AACH;AACD,mBAAOpB,mBAAmBgB,WAAnB,EAAgCC,YAAhC,EAA8CF,IAA9C,CACHnB,aAAa;AACT,qBAAKyB,QAAL,CAAc;AACV,qBAACd,QAAD,GAAY;AACRX,iCADQ;AAERuB;AAFQ;AADF,iBAAd;AAMH,aARE,CAAP;AAUH,SArBL,EAsBKG,KAtBL,CAsBWC,OAAO;AACVC,oBAAQC,GAAR,CAAY,0BAAZ,EAAwCF,GAAxC;AACH,SAxBL;AAyBH;;AAEDG,aAAS;AACL,cAAM,EAAEpB,QAAF,KAAe,KAAKD,KAA1B;AACA,cAAMsB,YAAY,KAAKzB,KAAL,CAAWI,SAASC,QAApB,CAAlB;;AAEA,YAAI,CAACoB,SAAL,EAAgB;AACZ;AACA,mBAAO;AAAA;AAAA;AAAA;AAAA,aAAP;AACH;;AAED,cAAM,EAAE/B,SAAF,KAA+B+B,SAArC;AAAA,cAAsBC,UAAtB,4BAAqCD,SAArC;;AAEA,eAAO,cAAC,SAAD,EAAeC,UAAf,CAAP;AACH;AAnEsD;AAAtC3B,mB,CACV4B,S,GAAY;AACfjB,aAASf,OAAOiC,UADD;AAEfjB,iCAA6BhB,OAAOiC,UAFrB;AAGfxB,cAAUR,MAAM;AACZS,kBAAUV,OAAOiC;AADL,KAAN,EAEPA;AALY,C","file":"MagentoRouteHandler.js","sourcesContent":["import { createElement, Component } from 'react';\nimport { string, shape } from 'prop-types';\nimport resolveUnknownRoute from './resolveUnknownRoute';\nimport fetchRootComponent from './fetchRootComponent';\n\nexport default class MagentoRouteHandler extends Component {\n    static propTypes = {\n        apiBase: string.isRequired,\n        __tmp_webpack_public_path__: string.isRequired,\n        location: shape({\n            pathname: string.isRequired\n        }).isRequired\n    };\n\n    state = {};\n\n    componentDidMount() {\n        this.getRouteComponent(this.props.location.pathname);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        const { location } = this.props;\n        const changed = nextProps.location.pathname !== location.pathname;\n        const seen = !!this.state[nextProps.location.pathname];\n\n        if (changed && !seen) {\n            this.getRouteComponent(nextProps.location.pathname);\n        }\n    }\n\n    getRouteComponent(pathname) {\n        const { apiBase, __tmp_webpack_public_path__ } = this.props;\n\n        resolveUnknownRoute({\n            route: pathname,\n            apiBase,\n            __tmp_webpack_public_path__\n        })\n            .then(({ rootChunkID, rootModuleID, matched, id }) => {\n                if (!matched) {\n                    // TODO: User-defined 404 page\n                    // when the API work is done to support it\n                    throw new Error('404');\n                }\n                return fetchRootComponent(rootChunkID, rootModuleID).then(\n                    Component => {\n                        this.setState({\n                            [pathname]: {\n                                Component,\n                                id\n                            }\n                        });\n                    }\n                );\n            })\n            .catch(err => {\n                console.log('Routing resolve failed\\n', err);\n            });\n    }\n\n    render() {\n        const { location } = this.props;\n        const routeInfo = this.state[location.pathname];\n\n        if (!routeInfo) {\n            // TODO (future iteration): User-defined loading content\n            return <div>Loading</div>;\n        }\n\n        const { Component, ...routeProps } = routeInfo;\n\n        return <Component {...routeProps} />;\n    }\n}\n"]}