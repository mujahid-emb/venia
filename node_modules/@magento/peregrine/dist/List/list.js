import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import { Component, createElement } from 'react';
import PropTypes from 'prop-types';

import fromRenderProp from '../util/fromRenderProp';
import iterable from '../validators/iterable';
import Items from './items';

class List extends Component {
    constructor(...args) {
        var _temp;

        return _temp = super(...args), this.handleSelectionChange = selection => {
            const { onSelectionChange } = this.props;

            if (onSelectionChange) {
                onSelectionChange(selection);
            }
        }, _temp;
    }

    render() {
        const _props = this.props,
              {
            classes,
            getItemKey,
            items,
            render,
            renderItem,
            onSelectionChange,
            selectionModel
        } = _props,
              restProps = _objectWithoutProperties(_props, ['classes', 'getItemKey', 'items', 'render', 'renderItem', 'onSelectionChange', 'selectionModel']);

        const customProps = {
            classes,
            getItemKey,
            items,
            onSelectionChange,
            selectionModel
        };

        const Root = fromRenderProp(render, Object.keys(customProps));

        return createElement(
            Root,
            _extends({ className: classes.root }, customProps, restProps),
            createElement(Items, {
                items: items,
                getItemKey: getItemKey,
                renderItem: renderItem,
                selectionModel: selectionModel,
                onSelectionChange: this.handleSelectionChange
            })
        );
    }

}

List.propTypes = {
    classes: PropTypes.shape({
        root: PropTypes.string
    }),
    getItemKey: PropTypes.func.isRequired,
    items: iterable.isRequired,
    render: PropTypes.oneOfType([PropTypes.func, PropTypes.string]).isRequired,
    renderItem: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
    onSelectionChange: PropTypes.func,
    selectionModel: PropTypes.oneOf(['checkbox', 'radio'])
};
List.defaultProps = {
    classes: {},
    getItemKey: ({ id }) => id,
    items: [],
    render: 'div',
    renderItem: 'div',
    selectionModel: 'radio'
};
export default List;
//# sourceMappingURL=list.js.map