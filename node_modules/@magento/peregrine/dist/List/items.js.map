{"version":3,"sources":["../../src/List/items.js"],"names":["Component","Fragment","createElement","PropTypes","memoize","iterable","ListItem","removeFocus","hasFocus","updateCursor","index","cursor","updateSelection","key","prevState","props","selectionModel","selection","Set","add","has","delete","Items","state","handleBlur","setState","getClickHandler","syncSelection","getFocusHandler","render","getItemKey","items","renderItem","children","Array","from","item","onSelectionChange","propTypes","func","isRequired","oneOfType","string","oneOf","defaultProps","id"],"mappings":"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","file":"items.js","sourcesContent":["import { Component, Fragment, createElement } from 'react';\nimport PropTypes from 'prop-types';\n\nimport memoize from '../util/unaryMemoize';\nimport iterable from '../validators/iterable';\nimport ListItem from './item';\n\nconst removeFocus = () => ({\n    hasFocus: false\n});\n\nconst updateCursor = memoize(index => () => ({\n    cursor: index,\n    hasFocus: true\n}));\n\nconst updateSelection = memoize(key => (prevState, props) => {\n    const { selectionModel } = props;\n    let selection;\n\n    if (selectionModel === 'radio') {\n        selection = new Set().add(key);\n    }\n\n    if (selectionModel === 'checkbox') {\n        selection = new Set(prevState.selection);\n\n        if (selection.has(key)) {\n            selection.delete(key);\n        } else {\n            selection.add(key);\n        }\n    }\n\n    return { selection };\n});\n\nclass Items extends Component {\n    static propTypes = {\n        getItemKey: PropTypes.func.isRequired,\n        items: iterable.isRequired,\n        renderItem: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n        selectionModel: PropTypes.oneOf(['checkbox', 'radio'])\n    };\n\n    static defaultProps = {\n        getItemKey: ({ id }) => id,\n        selectionModel: 'radio'\n    };\n\n    state = {\n        cursor: null,\n        hasFocus: false,\n        selection: new Set()\n    };\n\n    render() {\n        const { getItemKey, items, renderItem } = this.props;\n        const { cursor, hasFocus, selection } = this.state;\n\n        const children = Array.from(items, (item, index) => {\n            const key = getItemKey(item, index);\n\n            return (\n                <ListItem\n                    key={key}\n                    item={item}\n                    render={renderItem}\n                    hasFocus={hasFocus && cursor === index}\n                    isSelected={selection.has(key)}\n                    onBlur={this.handleBlur}\n                    onClick={this.getClickHandler(key)}\n                    onFocus={this.getFocusHandler(index)}\n                />\n            );\n        });\n\n        return <Fragment>{children}</Fragment>;\n    }\n\n    syncSelection() {\n        const { selection } = this.state;\n        const { onSelectionChange } = this.props;\n\n        if (onSelectionChange) {\n            onSelectionChange(selection);\n        }\n    }\n\n    handleBlur = () => {\n        this.setState(removeFocus);\n    };\n\n    getClickHandler = memoize(key => () => {\n        this.setState(updateSelection(key), this.syncSelection);\n    });\n\n    getFocusHandler = memoize(index => () => {\n        this.setState(updateCursor(index));\n    });\n}\n\nexport default Items;\n"]}