{"version":3,"sources":["../../../src/RestApi/Magento2/M2ApiRequest.js"],"names":["M2ApiResponseError","MulticastCache","withDefaultHeaders","headerAdditions","headers","Headers","Accept","entries","name","value","append","forEach","console","warn","Object","M2ApiRequest","constructor","resourceUrl","opts","controller","AbortController","method","signal","credentials","run","_isMulticastable","_promise","_fetchMulticast","_fetch","getResponse","Error","then","res","clone","abortRequest","abort","isRolling","cache","hasOwnProperty","multicast","body","_transport","args","window","fetch","remove","e","response","ok","text","bodyText","inflightMatch","match","rolling","store","promise","catch","error","replacedInFlightMatch","request","req","parseJSON","json"],"mappings":"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","file":"M2ApiRequest.js","sourcesContent":["import M2ApiResponseError from './M2ApiResponseError';\nimport * as MulticastCache from './MulticastCache';\n\n// TODO: headers are locked right now, add configurability\nconst withDefaultHeaders = headerAdditions => {\n    const headers = new Headers({\n        'Content-type': 'application/json',\n        Accept: 'application/json'\n    });\n    if (headerAdditions) {\n        if (headerAdditions instanceof Headers) {\n            /* istanbul ignore next: current phantomJS doesn't support */\n            if (headerAdditions.entries) {\n                for (const [name, value] of headerAdditions) {\n                    headers.append(name, value);\n                }\n            } else if (headerAdditions.forEach) {\n                // cover legacy case for old test environments\n                headerAdditions.forEach((name, value) => {\n                    headers.append(name, value);\n                });\n                /* istanbul ignore next: should never happen, trivial to test*/\n            } else {\n                console.warn(\n                    'Could not use headers object supplied to M2ApiRequest',\n                    headerAdditions\n                );\n            }\n        } else {\n            for (const [name, value] of Object.entries(headerAdditions)) {\n                headers.append(name, value);\n            }\n        }\n    }\n    return headers;\n};\n\n/**\n * All [fetch options](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters) are passed through, with the addition of:\n * @typedef {Object} M2ApiRequestOptions\n * @property {boolean} [multicast] Override default multicast detection\n */\n\n/**\n * A request to the Magento 2 REST API. Returns a Promise created by a network\n * fetch, but can potentially reuse prior requests if they qualify for\n * multicast. Can abort an outstanding fetch request.\n *\n * @param {M2ApiRequestOptions} opts - All other [fetch options](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters) will be passed through to `fetch`.\n */\nclass M2ApiRequest {\n    constructor(resourceUrl, opts = {}) {\n        this.controller = new AbortController();\n        this.resourceUrl = resourceUrl;\n        // merge headers specially\n        this.opts = {\n            // can be overridden\n            method: 'GET',\n            signal: this.controller.signal,\n            credentials: 'include',\n            ...opts,\n            // cannot be overridden, only appended to\n            headers: withDefaultHeaders(opts.headers)\n        };\n    }\n    /**\n     * Execute the request. Must be run before {@link M2ApiRequest#getResponse}\n     * or {@link M2ApiRequest#cancel} can be called.\n     */\n    run() {\n        if (this._isMulticastable()) {\n            this._promise = this._fetchMulticast();\n        } else {\n            this._promise = this._fetch();\n        }\n    }\n    /**\n     * Get the promise for the network operation. Can only be called after\n     * `.run()` is called.\n     * For multicast requests, will return a promise for a new copy of the\n     * response every time it is called, since a Body can only be used once.\n     * Exists so that requests can reuse the promises from other requests.\n     * @returns {Promise} Promise for the result of the request.\n     */\n    getResponse() {\n        if (!this._promise) {\n            throw new Error(\n                'M2ApiRequest#getResponse() called before M2ApiRequest#run(), so no promise exists yet'\n            );\n        }\n        if (this._isMulticastable()) {\n            return this._promise.then(res => res.clone());\n        } else {\n            return this._promise;\n        }\n    }\n    /**\n     * Abort the network operation. Multicasted requests catch the AbortError\n     * and attempt to reuse a more recent matching request from cache. Other\n     * requests will pass the AbortError rejection through to the consumer.\n     */\n    abortRequest() {\n        this.controller.abort();\n    }\n    /**\n     * Check if this request intends to override prior requests to the same\n     * resource. Rolling requests will take the place of prior outstanding\n     * requests, to ensure the freshest resource at the cost of additional\n     * network calls.\n     *\n     * The current logic for rolling requests is determined by the `cache`\n     * option. [Cache modes](https://developer.mozilla.org/en-US/docs/Web/API/Request/cache)\n     * `reload` and `no-store` both indicate complete cache bypass. This\n     * logically implies that the user has just changed server state and wants\n     * to force retrieve an updated resource, so multicasting a prior request\n     * would not be appropriate--the response may not reflect the more recent\n     * change.\n     * @returns {boolean} True if the request is rolling.\n     */\n    isRolling() {\n        return this.opts.cache === 'no-store' || this.opts.cache === 'reload';\n    }\n    /**\n     * Make sure not to multicast POST requests which have a nonempty body,\n     * since they are unsafe and non-idempotent, so each call may mutate\n     * server-side state.\n     *\n     * In the M2 REST API, some POST requests have no body, and those tend\n     * to be idempotent.\n     *\n     * The `multicast` boolean option to the constructor can be used to\n     * override this, either to force `false` or `true`.\n     *\n     * @private\n     */\n    _isMulticastable() {\n        return this.opts.hasOwnProperty('multicast')\n            ? this.opts.multicast\n            : !(this.opts.method === 'POST' && this.opts.body);\n    }\n    /**\n     * Use the Fetch API to place a request to the M2 REST API.\n     * Exposed on prototype for testing only.\n     * @private\n     */\n    /* istanbul ignore next */\n    _transport(...args) {\n        return window.fetch(...args);\n    }\n    /**\n     * Use the AbortController API to make a cancelable fetch request.\n     * Reject on HTTP errors.\n     * @private\n     */\n    _fetch() {\n        return this._transport(this.resourceUrl, this.opts)\n            .then(\n                // When the network operation completes, remove from cache\n                // as a side effect.\n                res => {\n                    MulticastCache.remove(this);\n                    return res;\n                },\n                e => {\n                    MulticastCache.remove(this);\n                    throw e;\n                }\n            )\n            .then(response => {\n                // WHATWG fetch will only reject in the unlikely event\n                // of an error prior to opening the HTTP request.\n                // It pays no attention to HTTP status codes.\n                // But the response object does have an `ok` boolean\n                // corresponding to status codes in the 2xx range.\n                // An M2ApiRequest will reject, passing server errors\n                // to the client, in the event of an HTTP error code.\n                if (!response.ok) {\n                    return (\n                        response\n                            // The response may or may not be JSON.\n                            // Let M2ApiResponseError handle it.\n                            .text()\n                            // Throw a specially formatted error which\n                            // includes the original context of the request,\n                            // and formats the server response.\n                            .then(bodyText => {\n                                throw new M2ApiResponseError({\n                                    method: this.opts.method,\n                                    resourceUrl: this.resourceUrl,\n                                    response,\n                                    bodyText\n                                });\n                            })\n                    );\n                }\n                return response;\n            });\n    }\n    /**\n     * Get a network operation matching this request, either by finding\n     * one in the MulticastCache, or by launching a new one (and caching\n     * it in the MulticastCache).\n     * @private\n     */\n    _fetchMulticast() {\n        // Does an inflight request exist that could be reused here?\n        // That is, does it have the same method, resourceUrl, and body and it\n        // appears idempotent and safe ?\n        const inflightMatch = MulticastCache.match(this);\n\n        // Is this request meant to override an existing inflight request?\n        const rolling = this.isRolling();\n        if (inflightMatch && !rolling) {\n            // Reuse the request!\n            return inflightMatch.getResponse();\n        }\n\n        // Either there is no match, or this is a rolling request\n        // and we must override the match.\n\n        // Cache this request for future use.\n        MulticastCache.store(this);\n\n        const promise = this._fetch().catch(error => {\n            // Rolling requests cause prior matching requests to abort.\n            // Their consumers will get an unexpected error unless we\n            // swallow the AbortError we expect, and replace it with\n            // the promise from our rolling request.\n            if (error.name === 'AbortError') {\n                const replacedInFlightMatch = MulticastCache.match(this);\n                if (replacedInFlightMatch) {\n                    // There is a rolling request in the cache to override!\n                    return replacedInFlightMatch.getResponse();\n                }\n            }\n            throw error;\n        });\n\n        if (rolling && inflightMatch) {\n            inflightMatch.abortRequest();\n        }\n\n        return promise;\n    }\n}\n\nexport default M2ApiRequest;\n\n/**\n * Place a request to the Magento 2 REST API and return a Promise for the\n * response.\n * @param (string) resourceUrl The URL of the resource to request.\n * @param {M2ApiRequestOptions} opts Options to be passed to [fetch](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters), with the addition of the `multicast` option.\n * @returns {Promise} A promise for the parsed REST request.\n */\nexport function request(resourceUrl, opts) {\n    const req = new M2ApiRequest(resourceUrl, opts);\n\n    req.run();\n\n    const promise = req.getResponse();\n\n    if (opts && opts.parseJSON === false) {\n        return promise;\n    }\n    return promise.then(res => res.json());\n}\n"]}