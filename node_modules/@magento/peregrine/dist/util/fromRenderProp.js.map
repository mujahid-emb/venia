{"version":3,"sources":["../../src/util/fromRenderProp.js"],"names":["createElement","cache","Map","filterProps","props","blacklist","Object","entries","reduce","r","k","v","includes","fromRenderProp","elementType","customProps","isComposite","uniqueCustomProps","Array","from","Set","sort","key","join","has","Component","displayName","set","get"],"mappings":"AAAA,SAASA,aAAT,QAA8B,OAA9B;;AAEA;AACA,MAAMC,QAAQ,IAAIC,GAAJ,EAAd;;AAEA,OAAO,MAAMC,cAAc,CAACC,QAAQ,EAAT,EAAaC,YAAY,EAAzB,KACvBC,OAAOC,OAAP,CAAeH,KAAf,EAAsBI,MAAtB,CAA6B,CAACC,CAAD,EAAI,CAACC,CAAD,EAAIC,CAAJ,CAAJ,KAAe;AACxC,QAAI,CAACN,UAAUO,QAAV,CAAmBF,CAAnB,CAAL,EAA4B;AACxBD,UAAEC,CAAF,IAAOC,CAAP;AACH;AACD,WAAOF,CAAP;AACH,CALD,EAKG,EALH,CADG;;AAQP,MAAMI,iBAAiB,CAACC,WAAD,EAAcC,cAAc,EAA5B,KAAmC;AACtD,UAAMC,cAAc,OAAOF,WAAP,KAAuB,UAA3C;;AAEA;AACA,QAAIE,WAAJ,EAAiB;AACb,eAAOF,WAAP;AACH;;AAED;AACA,UAAMG,oBAAoBC,MAAMC,IAAN,CAAW,IAAIC,GAAJ,CAAQ,CAAC,GAAGL,WAAJ,EAAiBM,IAAjB,EAAR,CAAX,CAA1B;;AAEA;AACA,UAAMC,MAAO,GAAER,WAAY,KAAIG,kBAAkBM,IAAlB,CAAuB,GAAvB,CAA4B,EAA3D;;AAEA;AACA;AACA,QAAI,CAACtB,MAAMuB,GAAN,CAAUF,GAAV,CAAL,EAAqB;AACjB;AACA;AACA,cAAMG,YAAYrB,SACdJ,cAAcc,WAAd,EAA2BX,YAAYC,KAAZ,EAAmBa,iBAAnB,CAA3B,CADJ;;AAGAQ,kBAAUC,WAAV,GAAyB,kBAAiBZ,WAAY,GAAtD;AACAb,cAAM0B,GAAN,CAAUL,GAAV,EAAeG,SAAf;AACH;;AAED,WAAOxB,MAAM2B,GAAN,CAAUN,GAAV,CAAP;AACH,CA3BD;;AA6BA,eAAeT,cAAf","file":"fromRenderProp.js","sourcesContent":["import { createElement } from 'react';\n\n// memoization cache\nconst cache = new Map();\n\nexport const filterProps = (props = {}, blacklist = []) =>\n    Object.entries(props).reduce((r, [k, v]) => {\n        if (!blacklist.includes(k)) {\n            r[k] = v;\n        }\n        return r;\n    }, {});\n\nconst fromRenderProp = (elementType, customProps = []) => {\n    const isComposite = typeof elementType === 'function';\n\n    // if `elementType` is a function, it's already a component\n    if (isComposite) {\n        return elementType;\n    }\n\n    // sort and de-dupe `customProps`\n    const uniqueCustomProps = Array.from(new Set([...customProps].sort()));\n\n    // hash arguments for memoization\n    const key = `${elementType}//${uniqueCustomProps.join(',')}`;\n\n    // only create a new component if not cached\n    // otherwise React will unmount on every render\n    if (!cache.has(key)) {\n        // create an SFC that renders a node of type `elementType`\n        // and filter any props that shouldn't be written to the DOM\n        const Component = props =>\n            createElement(elementType, filterProps(props, uniqueCustomProps));\n\n        Component.displayName = `fromRenderProp(${elementType})`;\n        cache.set(key, Component);\n    }\n\n    return cache.get(key);\n};\n\nexport default fromRenderProp;\n"]}