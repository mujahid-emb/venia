{"version":3,"sources":["../../../src/store/enhancers/exposeSlices.js"],"names":["combineReducers","exposeSlices","createStore","args","store","slices","addReducer","key","reducer","replaceReducer"],"mappings":";AAAA,SAASA,eAAT,QAAgC,OAAhC;;AAEA;;;;;;;AAOA,MAAMC,eAAeC,eAAe,CAAC,GAAGC,IAAJ,KAAa;AAC7C,UAAMC,QAAQF,YAAY,GAAGC,IAAf,CAAd;AACA,UAAME,SAAS,EAAf;;AAEA;;;;AAIA,UAAMC,aAAa,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACjCH,eAAOE,GAAP,IAAcC,OAAd;;AAEAJ,cAAMK,cAAN,CAAqBT,gBAAgBK,MAAhB,CAArB;AACH,KAJD;;AAMA,wBACOD,KADP;AAEIE;AAFJ;AAIH,CAlBD;;AAoBA,eAAeL,YAAf","file":"exposeSlices.js","sourcesContent":["import { combineReducers } from 'redux';\n\n/**\n * Add slice methods to a store.\n * This function adheres to Redux's store enhancer pattern.\n *\n * @param {Function} createStore The store creator to enhance.\n * @returns {Function}\n */\nconst exposeSlices = createStore => (...args) => {\n    const store = createStore(...args);\n    const slices = {};\n\n    /**\n     * Add a slice to the root.\n     * The store replaces the root with one containing the new slice.\n     */\n    const addReducer = (key, reducer) => {\n        slices[key] = reducer;\n\n        store.replaceReducer(combineReducers(slices));\n    };\n\n    return {\n        ...store,\n        addReducer\n    };\n};\n\nexport default exposeSlices;\n"]}